// Generated by CoffeeScript 1.2.1-pre

(function($) {
  /*
  	jQuery Carousel Plugin
  	Author: Jakub Korzeniowski
  	Agency: Softhis
  	Website: www.softhis.com
  	Released under the MIT License
  
  	options:
  	duration - duration in ms or a string representing jQuery-type duration
  	easing - jQuery easing. easing plugins allowed
  	speed - default speed for the layer, relative to li containing tag
  	delay - default delay in ms or a string representing jQuery-type duration
  	onAnimationComplete - function to be called after the animation. takes 2 params - index of element to be showed, and element itself
  	onAnimationInit - function to be called before the animation. takes 2 params - index of element to be showed, and element itself
  	onAjaxInit - function to be called before ajax request is made. takes 2 params - index of element to be showed, and the request string
  	onAjaxError - function to be called in case of failure of the request. takes 2 params - index of element to be showed, and the error message
  	onAjaxComplete - function to be called after successful ajax request was made. takes 2 params - index of element to be showed, and the return data
  	ajax - flag indicating if content of li tags in the carousel should be dynamically loaded. requires data-request attribute on all li elements.
  */
  return $.extend($.fn, {
    carousel: function(options) {
      var defaults, opts;
      defaults = {
        'duration': 'slow',
        'easing': 'swing',
        'speed': 0,
        'delay': 0,
        'onAnimationComplete': $.noop,
        'onAnimationInit': $.noop,
        'onAjaxInit': $.noop,
        'onAjaxError': $.noop,
        'onAjaxComplete': $.noop,
        'ajax': false
      };
      opts = $.extend(defaults, options);
      return this.each(function() {
        var $controls, $controlsParentWidth, $layers, $li, $nextArrow, $previousArrow, $self, $ul, animationRunning, controlsCount, init, itemCount, itemWidth;
        $self = $(this);
        $ul = $self.find(':not(.carousel-controls)').children('ul');
        $li = $ul.find('li');
        $layers = $ul.find('.carousel-layer');
        $nextArrow = $self.find('.next-arrow');
        $previousArrow = $self.find('.previous-arrow');
        $controls = $self.find('.carousel-controls li');
        $controlsParentWidth = $controls.parent().width();
        itemWidth = $li.width();
        itemCount = $li.length;
        controlsCount = $controls.length;
        animationRunning = false;
<<<<<<< HEAD

=======
>>>>>>> dodane preloadowanie img w ajaxowym contencie
        if (itemCount > 1) {
          init = function() {
            itemWidth = $li.width();
            if ($self.data('carousel') != null) {
              $self.data('carousel').currentItem = 0;
            }
            $ul.css({
              'width': "" + (itemWidth * itemCount) + "px",
              'position': 'absolute',
              'left': 0,
              'top': 0
            });
            if (!$self.find('.list-wrapper').length) {
              $ul.wrap($('<div />', {
                'class': 'list-wrapper'
              }));
            }
            $li.css({
              'opacity': 1
            }).filter(':not(:first)').css({
              'opacity': 0
            });
            $previousArrow.addClass('disabled');
            $nextArrow.removeClass('disabled');
            if (itemCount < 2) $nextArrow.addClass('disabled');
            $layers.each(function() {
              var $layer;
              $layer = $(this);
              $layer.data('delay', $layer.attr('data-delay') ? parseInt($layer.attr('data-delay')) : opts.delay);
              $layer.data('speed', $layer.attr('data-speed') ? parseInt($layer.attr('data-speed')) : opts.speed);
              return $layer.css({
                'opacity': 1
              });
            });
            return $controls.each(function(i) {
              var $control, horizontalMargin;
              $control = $(this);
              if (i === 0) {
                $control.addClass('active');
              } else {
                $control.removeClass('active');
              }
              horizontalMargin = parseInt($control.css('margin-left'));
              horizontalMargin += parseInt($control.css('margin-right'));
              return $control.css({
                'width': "" + (($controlsParentWidth / controlsCount) - horizontalMargin) + "px"
              });
            });
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> dodane preloadowanie img w ajaxowym contencie
          };
          init();
          $self.data('carousel', {
            'currentItem': 0,
            'itemCount': itemCount,
            'stop': function() {
              $ul.stop(true, true);
              $layers.stop(true, true);
              return animationRunning = false;
            },
            'showItem': function(index) {
              var animationProperties, animationSettings, layerAnimationSettings;
              if (index < 0 || index >= itemCount || index === $self.data('carousel').currentItem || animationRunning) {
                return false;
              }
              animationRunning = true;
              opts.onAnimationInit(index, $li.eq(index));
              animationProperties = {
                'left': "" + (-index * itemWidth) + "px"
              };
              animationSettings = {
                'duration': opts.duration,
                'easing': opts.easing,
                'complete': function() {
                  animationRunning = false;
                  return opts.onAnimationComplete(index, $li.eq(index));
<<<<<<< HEAD
                }
              };
              layerAnimationSettings = {
                'duration': opts.duration,
                'easing': opts.easing
              };
              $ul.stop().delay(opts.delay).animate(animationProperties, animationSettings);
              $li.each(function(i) {
                var direction;
                if (i === index) {
                  animationProperties = {
                    'opacity': 1
                  };
                  direction = $self.data('carousel').currentItem < index ? 1 : -1;
                  $(this).find('.carousel-layer').each(function() {
                    var $layer;
                    $layer = $(this);
                    return $layer.css({
                      'left': "" + (direction * $layer.data('speed') * 100) + "%",
                      'opacity': 0
                    }).stop().delay($layer.data('delay')).animate({
                      'left': 0,
                      'opacity': 1
                    }, layerAnimationSettings);
                  });
                } else {
                  animationProperties = {
                    'opacity': 0
                  };
                }
                return $(this).stop().delay(opts.delay).animate(animationProperties, layerAnimationSettings);
              });
              if (index === itemCount - 1) {
                $nextArrow.addClass('disabled');
              } else {
                $nextArrow.removeClass('disabled');
              }
              if (index === 0) {
                $previousArrow.addClass('disabled');
              } else {
                $previousArrow.removeClass('disabled');
              }
              $controls.removeClass('active').eq(index).addClass('active');
              $self.data('carousel').currentItem = index;
              return true;
            },
            'requestItem': function(index) {
              var $request, $requestedLi;
              if (index < 0 || index >= itemCount || index === $self.data('carousel').currentItem || animationRunning) {
                return false;
              }
              if (opts.ajax) {
                $requestedLi = $li.eq(index);
                $request = $requestedLi.attr('data-request');
                opts.onAjaxInit(index, $request);
                return $.ajax($request, {
                  success: function(data) {
                    var $data, $img, imgCount, imgLoaded;
                    $data = $(data);
                    $img = $data.find('img');
                    imgCount = $img.length;
                    imgLoaded = 0;
                    if (imgCount > 0) {
                      return $img.each(function() {
                        var $curImg, src;
                        $curImg = $(this);
                        src = $curImg.attr('src');
                        return $curImg.load(function() {
                          if (++imgLoaded >= imgCount) {
                            $requestedLi.html($(data));
                            $requestedLi.find('.carousel-layer').each(function() {
                              var $layer;
                              $layer = $(this);
                              $layer.data('delay', $layer.attr('data-delay') ? parseInt($layer.attr('data-delay')) : opts.delay);
                              return $layer.data('speed', $layer.attr('data-speed') ? parseInt($layer.attr('data-speed')) : opts.speed);
                            });
                            opts.onAjaxComplete(index, data);
                            return $self.data('carousel').showItem(index);
                          }
                        }).error(function(msg) {
                          return opts.onAjaxError(index, msg);
                        }).attr('src', src);
                      });
                    } else {
                      $requestedLi.html($(data));
                      $requestedLi.find('.carousel-layer').each(function() {
                        var $layer;
                        $layer = $(this);
                        $layer.data('delay', $layer.attr('data-delay') ? parseInt($layer.attr('data-delay')) : opts.delay);
                        return $layer.data('speed', $layer.attr('data-speed') ? parseInt($layer.attr('data-speed')) : opts.speed);
                      });
                      opts.onAjaxComplete(index, data);
                      return $self.data('carousel').showItem(index);
                    }
                  },
                  error: function(msg) {
                    return opts.onAjaxError(index, msg);
                  }
                });
              } else {
                return $self.data('carousel').showItem(index);
              }
            }
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> dodane preloadowanie img w ajaxowym contencie
          });
          $nextArrow.click(function() {
            $self.data('carousel').requestItem($self.data('carousel').currentItem + 1);
            return false;
          });
          $previousArrow.click(function() {
            $self.data('carousel').requestItem($self.data('carousel').currentItem - 1);
            return false;
          });
          $controls.click(function() {
            $self.data('carousel').requestItem($.inArray(this, $controls));
            return false;
          });
          return $(window).bind('resize', function() {
            $self.data('carousel').stop();
            return init();
          });
        }
<<<<<<< HEAD
=======
          }
        });
        $nextArrow.click(function() {
          $self.data('carousel').requestItem($self.data('carousel').currentItem + 1);
          return false;
        });
        $previousArrow.click(function() {
          $self.data('carousel').requestItem($self.data('carousel').currentItem - 1);
          return false;
        });
        $controls.click(function() {
          $self.data('carousel').requestItem($.inArray(this, $controls));
          return false;
        });
        return $(window).bind('resize', function() {
          $self.data('carousel').stop();
          return init();
        });
>>>>>>> dodane preloadowanie img w ajaxowym contencie
=======
>>>>>>> dodane preloadowanie img w ajaxowym contencie
      });
    }
  });
})(jQuery);
